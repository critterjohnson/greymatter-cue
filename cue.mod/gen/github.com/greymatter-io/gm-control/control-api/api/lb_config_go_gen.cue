// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/greymatter-io/gm-control/control-api/api

package api

import "google.golang.org/protobuf/types/known/durationpb"

#HashFunction: int32 // #enumHashFunction

#enumHashFunction:
	#XX_HASH |
	#MURMUR_HASH_2

#values_HashFunction: {
	XX_HASH:       #XX_HASH
	MURMUR_HASH_2: #MURMUR_HASH_2
}

#XX_HASH:       #HashFunction & 0
#MURMUR_HASH_2: #HashFunction & 1

// ring_hash_lb_config
#RingHashLbConfig: {
	minimum_ring_size?: null | uint64 @go(MinimumRingSize,*uint64)
	hash_func:          #HashFunction @go(HashFunc)
	maximum_ring_size?: null | uint64 @go(MaximumRingSize,*uint64)
}

// original_dst_lb_config
#OriginalDstLbConfig: {
	use_http_header: bool @go(UseHTTPHeader)
}

// least_request_lb_config
#LeastRequestLbConfig: {
	choice_count?: null | uint32 @go(ChoiceCount,*uint32)
}

#Percent: {
	value: float64 @go(Value)
}

#ZoneAwareLbConfig: {
	routing_enabled?:      null | #Percent @go(RoutingEnabled,*Percent)
	min_cluster_size?:     null | uint64   @go(MinClusterSize,*uint64)
	fail_traffic_on_panic: bool            @go(FailTrafficOnPanic)
}

#LocalityWeightedLbConfig: {
}

#ConsistentHashingLbConfig: {
	use_hostname_for_hashing: bool @go(UseHostnameForHashing)
}

// common_lb_config
#CommonLbConfig: {
	healthy_panic_threshold?:             null | #Percent                   @go(HealthyPanicThreshold,*Percent)
	zone_aware_lb_config?:                null | #ZoneAwareLbConfig         @go(ZoneAwareLbConf,*ZoneAwareLbConfig)
	locality_weighted_lb_config?:         null | #LocalityWeightedLbConfig  @go(LocalityWeightedLbConf,*LocalityWeightedLbConfig)
	update_merge_window?:                 null | durationpb.#Duration       @go(UpdateMergeWindow,*google.golang.org/protobuf/types/known/durationpb.Duration)
	ignore_new_hosts_until_first_hc:      bool                              @go(IgnoreNewHostsUntilFirstHc)
	close_connections_on_host_set_change: bool                              @go(CloseConnectionsOnHostSetChange)
	consistent_hashing_lb_config?:        null | #ConsistentHashingLbConfig @go(ConsistentHashingLbConf,*ConsistentHashingLbConfig)
}
