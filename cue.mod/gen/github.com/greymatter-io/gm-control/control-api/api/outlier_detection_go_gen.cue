// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/greymatter-io/gm-control/control-api/api

package api

// OutlierDetection is a form of passive health checking that dynamically
// determines whether instances in a cluster are performing unlike others
// and preemptively removes them from a load balancing set.
#OutlierDetection: {
	// The time interval between ejection analysis sweeps. This can result in
	// both new ejections due to success rate outlier detection as well as
	// hosts being returned to service. Defaults to 10s and must be greater
	// than 0.
	interval_msec?: null | int @go(IntervalMsec,*int)

	// The base time that a host is ejected for. The real time is equal to
	// the base time multiplied by the number of times the host has been
	// ejected. Defaults to 30s. Setting this to 0 means that no host will be
	// ejected for longer than `interval_msec`.
	base_ejection_time_msec?: null | int @go(BaseEjectionTimeMsec,*int)

	// The maximum % of an upstream cluster that can be ejected due to
	// outlier detection. Defaults to 10% but will always eject at least one
	// host.
	max_ejection_percent?: null | int @go(MaxEjectionPercent,*int)

	// The number of consecutive 5xx responses before a consecutive 5xx ejection
	// occurs. Defaults to 5. Setting this to 0 effectively turns off the
	// consecutive 5xx detector.
	consecutive_5xx?: null | int @go(Consecutive5xx,*int)

	// The % chance that a host will be actually ejected when an outlier status
	// is detected through consecutive 5xx. This setting can be used to disable
	// ejection or to ramp it up slowly. Defaults to 100.
	enforcing_consecutive_5xx?: null | int @go(EnforcingConsecutive5xx,*int)

	// The % chance that a host will be actually ejected when an outlier status
	// is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	enforcing_success_rate?: null | int @go(EnforcingSuccessRate,*int)

	// The number of hosts in a cluster that must have enough request volume to
	// detect success rate outliers. If the number of hosts is less than this
	// setting, outlier detection via success rate statistics is not performed
	// for any host in the cluster. Defaults to 5. Setting this to 0 effectively
	// triggers the success rate detector regardless of the number of valid hosts
	// during an interval (as determined by `success_rate_request_volume`).
	success_rate_minimum_hosts?: null | int @go(SuccessRateMinimumHosts,*int)

	// The minimum number of total requests that must be collected in one
	// interval (as defined by the interval duration) to include this host
	// in success rate based outlier detection. If the volume is lower than this
	// setting, outlier detection via success rate statistics is not performed
	// for that host. Defaults to 100.
	success_rate_request_volume?: null | int @go(SuccessRateRequestVolume,*int)

	// This factor is used to determine the ejection threshold for success rate
	// outlier ejection. The ejection threshold is the difference between the
	// mean success rate, and the product of this factor and the standard
	// deviation of the mean success rate: mean - (stdev *
	// success_rate_stdev_factor). This factor is divided by a thousand to get a
	// double. That is, if the desired factor is 1.9, the runtime value should
	// be 1900. Defaults to 1900. Setting this to 0 effectively turns off the
	// success rate detector.
	success_rate_stdev_factor?: null | int @go(SuccessRateStdevFactor,*int)

	// The number of consecutive gateway failures (502, 503, 504 status or
	// connection errors that are mapped to one of those status codes) before a
	// consecutive gateway failure ejection occurs. Defaults to 5.
	consecutive_gateway_failure?: null | int @go(ConsecutiveGatewayFailure,*int)

	// The % chance that a host will be actually ejected when an outlier status
	// is detected through consecutive gateway failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 0.
	enforcing_consecutive_gateway_failure?: null | int @go(EnforcingConsecutiveGatewayFailure,*int)
}
