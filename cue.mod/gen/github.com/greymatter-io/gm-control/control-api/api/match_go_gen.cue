// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/greymatter-io/gm-control/control-api/api

package api

// MatchKind is an Enumeration of the attributes by which a request can be
// matched.
#MatchKind: string // #enumMatchKind

#enumMatchKind:
	#CookieMatchKind |
	#HeaderMatchKind |
	#QueryMatchKind

// MatchBehavior is an Enumeration of possible ways to match a request attribute.
#MatchBehavior: string // #enumMatchBehavior

#enumMatchBehavior:
	#ExactMatchBehavior |
	#RegexMatchBehavior |
	#RangeMatchBehavior |
	#PrefixMatchBehavior |
	#SuffixMatchBehavior

// CookiMatchKind matches against a request's cookies
#CookieMatchKind: #MatchKind & "cookie"

// HeaderMatchKind matches against a request's headers
#HeaderMatchKind: #MatchKind & "header"

// QueryMatchKind matches against a requests's query parameters
#QueryMatchKind: #MatchKind & "query"

// ExactMatchBehavior matches a request attribute with an exact comparison.
#ExactMatchBehavior: #MatchBehavior & "exact"

// RegexMatchBehavior matches a request attribute as a regex.
#RegexMatchBehavior: #MatchBehavior & "regex"

// RangeBehaviuorKind matches a request attribute as a numeric range.
#RangeMatchBehavior: #MatchBehavior & "range"

// PrefixBehaviorkind matches a request attribute as a prefix.
#PrefixMatchBehavior: #MatchBehavior & "prefix"

// SuffixBehaviorkind matches a request attribute as a suffix.
#SuffixMatchBehavior: #MatchBehavior & "suffix"

// A Match represents a mapping of a Metadatum from a MatchKind-typed
// request parameter to another Metadatum, with the MatchBehavior dictating
// how the values of the request parameter should be matched.
//
// Example:
//
//  Match{
//   HeaderMatchKind,
//   ExactMatchBehavior,
//   Metadatum{"X-SwVersion", "1.0"},
//   Metadatum{"sunset", "true"},
//  }
//
// would define a match which looks for a specific value of "1.0" for the
// X-SwVersion header in a request, and if present, adds a specific key/value
// constraint of sunset=true.
//
// Values can be omitted to map any value for the specified key.
//
// Example:
//
//  Match{
//   HeaderMatchKind,
//   ExactMatchBehavior,
//   Metadatum{Key:"X-GitSha"},
//   Metadatum{Key:"git-sha"},
//  }
//
// would define a match which looks for the X-GitSha header in a request,
// and if present, adds the value of that header as the value for a "git-sha"
// metadata constraint on Instances in the Cluster defined by the Route.
#Match: _

// privateMatch is a private type redeclaration that allows us to make use
// of golang's default json unmarshalling while also implementing the
// Unmarshaler interface.
_#privateMatch: #Match

// Matches is a slice of Match objects
#Matches: [...#Match]
