// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/greymatter-io/gm-control/control-api/api

package api

#RuleKey: string

// A Rule defines a mapping from a list of Methods and Matches to an AllConstraints
// struct. A Rule applies to a request if one of the Methods and all of the Matches
// apply.
//
// If a Rule applies, the constraints inferred from the Matches should be merged
// with each of the ClusterConstraints, which are then used to find a live
// Instance. The ClusterConstraints are randomly shuffled using their weights
// to affect the distribution. Each ClusterConstraint is examined to find a
// matching Instance, until one is found.
//
// It is possible to set a cohort seed on a SharedRules, Route, or Rule object.
// Only one of these will apply to any given request. A rule is the most
// specific way we have to direct a request to some backend so any request
// that matches a rule will use a cohort seed if set. This is true regardless
// of the rule source (SharedRules or Route).
//
// See CohortSeed docs for additional details of what a cohort seed does.
#Rule: {
	rule_key: #RuleKey @go(RuleKey)
	methods: [...string] @go(Methods,[]string)
	matches:      #Matches           @go(Matches)
	constraints:  #AllConstraints    @go(Constraints)
	cohort_seed?: null | #CohortSeed @go(CohortSeed,*CohortSeed)
}

#Rules: [...#Rule]

// A verifiableMatch is a subset of the fields from a Match object, used
// exclusively to check whether there are two Rule-s in the same Rules object
// that match the same kind and value with the same behavior.
_#verifiableMatch: {
	Kind:     #MatchKind
	Behavior: #MatchBehavior
	From:     #Metadatum
}
