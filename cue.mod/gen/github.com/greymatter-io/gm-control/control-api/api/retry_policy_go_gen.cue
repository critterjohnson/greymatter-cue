// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/greymatter-io/gm-control/control-api/api

package api

//GoogleRe2 regex engine
#GoogleRe2: {
	max_program_size: int @go(MaxProgramSize)
}

//RegexMatcher designed for safety when used with untrusted input
#RegexMatcher: {
	google_re2: #GoogleRe2 @go(GoogleRE2)
	regex:      string     @go(Regex)
}

//RangeMatch performs header match based on range
#RangeMatch: {
	start: int @go(Start)
	end:   int @go(End)
}

//HeaderMatcher requires the request to have matching values
#HeaderMatcher: {
	name:             string        @go(Name)
	exact_match:      string        @go(ExactMatch)
	regex_match:      string        @go(RegexMatch)
	safe_regex_match: #RegexMatcher @go(SafeRegexMatch)
	range_match:      #RangeMatch   @go(RangeMatch)
	present_match:    bool          @go(PresentMatch)
	prefix_match:     string        @go(PrefixMatch)
	suffix_match?:    string        @go(SuffixMatch)
	invert_match?:    bool          @go(InvertMatch)
}

//BackOff specifies paramaters that control retry back off
#BackOff: {
	base_interval: string @go(BaseInterval)
	max_interval:  string @go(MaxInterval)
}

// RetryPolicy specifies the number of times to retry a request and how long to
// wait before timing out.
#RetryPolicy: {
	// Number of times to retry an upstream request. Note that the initial
	// connection attempt is not included in this number, hence 0 means initial
	// attempt and no retries, and 1 means initial attempt plus one retry.
	num_retries: int @go(NumRetries)

	// Time limit in milliseconds for a single attempt.
	per_try_timeout_msec: int @go(PerTryTimeoutMsec)

	// Total time limit in milliseconds for all attempts (including the initial
	// attempt).
	timeout_msec: int @go(TimeoutMsec)

	// Specifies which types of errors will cause an automatic retry
	retry_on: string @go(RetryOn)

	// Used to determine the distribution of load across priorities used for retries
	retry_priority: string @go(RetryPriority)

	// Specifies what will be consulted when selecting a host for retries
	retry_host_predicate: string @go(RetryHostPredicate)

	// Max number of times host selection will be reattempted before giving up
	host_selection_retry_max_attempts: int @go(HostSelectionRetryMaxAttempts)

	// HTTP status codes that should trigger a retry
	retriable_status_codes: int @go(RetriableStatusCodes)

	// Specifies the interval between retries
	retry_back_off?: null | #BackOff @go(RetryBackOff,*BackOff)

	// HTTP response headers that trigger a retry if present in the response
	retriable_headers: #HeaderMatcher @go(RetriableHeaders)

	// HTTP headers which must be present in the request for retries to be attempted
	retriable_request_headers: #HeaderMatcher @go(RetriableRequestHeaders)
}
